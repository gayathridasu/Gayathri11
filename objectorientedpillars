package objectorientedpillars;

//Define a class representing a simple Bank Account
class BankAccount {
 private String accountNumber;
 private String accountHolder;
 private double balance;

 // Constructor to initialize the account
 public BankAccount(String accountNumber, String accountHolder, double balance) {
     this.accountNumber = accountNumber;
     this.accountHolder = accountHolder;
     this.balance = balance;
 }

 // Encapsulation: Provide getter and setter methods to access and modify private fields
 public String getAccountNumber() {
     return accountNumber;
 }

 public String getAccountHolder() {
     return accountHolder;
 }

 public double getBalance() {
     return balance;
 }

 public void deposit(double amount) {
     if (amount > 0) {
         balance += amount;
         System.out.println("Deposited $" + amount);
     }
 }

 public void withdraw(double amount) {
     if (amount > 0 && amount <= balance) {
         balance -= amount;
         System.out.println("Withdrawn $" + amount);
     } else {
         System.out.println("Withdrawal failed: Insufficient balance");
     }
 }

 // Abstraction: Provide a method for displaying account information
 public void displayAccountInfo() {
     System.out.println("Account Number: " + accountNumber);
     System.out.println("Account Holder: " + accountHolder);
     System.out.println("Balance: $" + balance);
 }
}

//Create a subclass (Inheritance) for a Savings Account
class SavingsAccount extends BankAccount {
 private double interestRate;

 public SavingsAccount(String accountNumber, String accountHolder, double balance, double interestRate) {
     super(accountNumber, accountHolder, balance);
     this.interestRate = interestRate;
 }

 // Polymorphism: Override the displayAccountInfo method
 @Override
 public void displayAccountInfo() {
     super.displayAccountInfo();  // Call the superclass method
     System.out.println("Interest Rate: " + interestRate + "%");
 }
}
